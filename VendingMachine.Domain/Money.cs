//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VendingMachine.Domain
{
    using System;

    public class Money:IComparable
    {
        public readonly Currency Currency;

        /// <summary>
        ///  Value in smallest measure
        /// </summary>
        public readonly int Value;

        public Money(Currency currency, int valueInMinUnits)
        {
            this.Currency = currency;
            this.Value = valueInMinUnits;
        }

        public static readonly Money Zero = new Money(Currency.Rub, 0);

        public static Money Rub(int rubles)
        {
            return new Money(global::VendingMachine.Domain.Currency.Rub, rubles * 100);
        }

        private static void GuardCurrency(Money a, Money b)
        {
            if (a == null || b == null) return;
            if (a.Currency != b.Currency) throw new MoneyCurrencyMismatchException();
        }
        public static int operator % (Money a, Money b)
        {
            GuardCurrency(a,b);
            return (int) (a.Value % b.Value);
        }

        public static int operator / (Money a, Money b)
        {
            GuardCurrency(a, b);
            return (int)(a.Value / b.Value);
        }

        public static Money operator *(Money a, int b)
        {
            return new Money(a.Currency, a.Value * b);    
        }

        public static Money operator -(Money a, Money b)
        {
            GuardCurrency(a,b);
            return new Money(a.Currency, a.Value - b.Value);    
        }

        public static bool operator > (Money a, Money b)
        {
            GuardCurrency(a, b);
            return a.Value > b.Value;
        }

        public static bool operator == (Money a, Money b)
        {
            if ((object)a == null && (object)b == null) return true;
            if ((object)a == null || (object)b == null) return false;
            GuardCurrency(a, b);
            return a.Value == b.Value;
        }

        public static Money operator + (Money a, Money b)
        {
            GuardCurrency(a, b);
            return new Money(a.Currency, a.Value + b.Value);
        }

        public static bool operator !=(Money a, Money b)
        {
            return !(a == b);
        }

        public static bool operator <(Money a, Money b)
        {
            return ! (a > b);
        }

        public static bool operator <= (Money a, Money b)
        {
            GuardCurrency(a, b);
            return a.Value <= b.Value;
        }

        public static bool operator >= (Money a, Money b)
        {
            GuardCurrency(a, b);
            return a.Value >= b.Value;
        }

        public override bool Equals(object obj)
        {
            if(!(obj is Money)) return false;
            Money otherMoney = (Money)obj;

            return this.Currency.Equals(otherMoney.Currency) && otherMoney.Value.Equals(this.Value);
        }

        public override int GetHashCode()
        {
            return this.Currency.GetHashCode() ^ this.Value.GetHashCode();
        }

        public int CompareTo(object obj)
        {
            Money other = obj as Money;
            if(other == null)return 1;
            GuardCurrency(this, other);
            return this.Value.CompareTo(other.Value);

        }

        public Money Clone()
        {
            return (Money)this.MemberwiseClone();
        }

        public override string ToString()
        {
            return string.Format("{0}.{1} {2}", Value / 100, Value % 100, Currency.ToString());
        }
    }
}